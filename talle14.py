# -*- coding: utf-8 -*-
"""Talle14.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Yjs7Tsz1ldnC-v9rito8v6jmHkTSn5OI
"""

def producto_escalar(vector1, vector2):
    if len(vector1) != len(vector2):
        return "Los vectores deben tener la misma longitud"
    else:
        producto = 0
        for i in range(len(vector1)):
            producto += vector1[i] * vector2[i]
        return producto

def main():
    n = int(input("Ingrese la longitud de los vectores: "))
    vector1 = []
    vector2 = []

    print("Ingrese los elementos del primer vector:")
    for i in range(n):
        elemento = float(input(f"Ingrese el elemento {i + 1}: "))
        vector1.append(elemento)

    print("Ingrese los elementos del segundo vector:")
    for i in range(n):
        elemento = float(input(f"Ingrese el elemento {i + 1}: "))
        vector2.append(elemento)

    resultado = producto_escalar(vector1, vector2)
    print(f"El producto escalar de los vectores es: {resultado}")

if __name__ == "__main__":
    main()

def solicitar_matriz(nombre):
    print(f"Ingrese las dimensiones de la matriz {nombre}:")
    filas = int(input("Número de filas: "))
    columnas = int(input("Número de columnas: "))

    matriz = []
    print(f"Ingrese los elementos de la matriz {nombre}:")
    for i in range(filas):
        fila = []
        for j in range(columnas):
            elemento = float(input(f"Ingrese el elemento ({i+1},{j+1}): "))
            fila.append(elemento)
        matriz.append(fila)
    return matriz

def imprimir_matriz(matriz):
    for fila in matriz:
        print(fila)

def suma_matrices(matriz_a, matriz_b):
    if len(matriz_a) != len(matriz_b) or len(matriz_a[0]) != len(matriz_b[0]):
        return None
    suma = []
    for i in range(len(matriz_a)):
        fila = []
        for j in range(len(matriz_a[0])):
            suma_elemento = matriz_a[i][j] + matriz_b[i][j]
            fila.append(suma_elemento)
        suma.append(fila)
    return suma

def multiplicacion_matrices(matriz_a, matriz_b):
    if len(matriz_a[0]) != len(matriz_b):
        return None
    producto = []
    for i in range(len(matriz_a)):
        fila = []
        for j in range(len(matriz_b[0])):
            suma = 0
            for k in range(len(matriz_a[0])):
                suma += matriz_a[i][k] * matriz_b[k][j]
            fila.append(suma)
        producto.append(fila)
    return producto

def multiplicacion_escalar(matriz, escalar):
    producto = []
    for fila in matriz:
        fila_resultante = [elemento * escalar for elemento in fila]
        producto.append(fila_resultante)
    return producto

def main():
    matriz_a = solicitar_matriz('A')
    matriz_b = solicitar_matriz('B')

    print("\nMatriz A:")
    imprimir_matriz(matriz_a)
    print("\nMatriz B:")
    imprimir_matriz(matriz_b)

    print("\nOperaciones:")
    operaciones = ["a) 3A", "b) 4B", "c) A + B", "d) B × A"]
    for operacion in operaciones:
        print(operacion)

    opcion = input("\nSeleccione una operación (a, b, c o d): ")

    if opcion == 'a':
        escalar = 3
        resultado = multiplicacion_escalar(matriz_a, escalar)
        print("\n3A:")
        imprimir_matriz(resultado)
    elif opcion == 'b':
        escalar = 4
        resultado = multiplicacion_escalar(matriz_b, escalar)
        print("\n4B:")
        imprimir_matriz(resultado)
    elif opcion == 'c':
        resultado = suma_matrices(matriz_a, matriz_b)
        if resultado is not None:
            print("\nA + B:")
            imprimir_matriz(resultado)
        else:
            print("No se pueden sumar las matrices porque no tienen las mismas dimensiones.")
    elif opcion == 'd':
        resultado = multiplicacion_matrices(matriz_b, matriz_a)
        if resultado is not None:
            print("\nB × A:")
            imprimir_matriz(resultado)
        else:
            print("No se puede multiplicar B por A porque el número de columnas de B no coincide con el número de filas de A.")
    else:
        print("Opción inválida.")

if __name__ == "__main__":
    main()
5